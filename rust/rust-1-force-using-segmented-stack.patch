From 9e472880537298604f651d05d654b2648ad2a5af Mon Sep 17 00:00:00 2001
From: Zhiyao Ma <zhiyao.ma.98@gmail.com>
Date: Sat, 27 Jan 2024 20:52:34 -0500
Subject: [PATCH] Force using segmented stacks.

---
 compiler/rustc_codegen_llvm/src/attributes.rs        | 8 ++++++++
 compiler/rustc_codegen_ssa/src/codegen_attrs.rs      | 1 +
 compiler/rustc_feature/src/builtin_attrs.rs          | 1 +
 compiler/rustc_middle/src/middle/codegen_fn_attrs.rs | 2 ++
 compiler/rustc_span/src/symbol.rs                    | 1 +
 5 files changed, 13 insertions(+)

diff --git a/compiler/rustc_codegen_llvm/src/attributes.rs b/compiler/rustc_codegen_llvm/src/attributes.rs
index b6c01545f30..83c3c307796 100644
--- a/compiler/rustc_codegen_llvm/src/attributes.rs
+++ b/compiler/rustc_codegen_llvm/src/attributes.rs
@@ -487,6 +487,14 @@ pub fn from_fn_attrs<'ll, 'tcx>(
         to_add.push(llvm::CreateAttrStringValue(cx.llcx, "target-features", &target_features));
     }
 
+    // Force segmented stack.
+    if cx.sess().target.llvm_target.contains("thumbv7em-none-eabi")
+      || cx.sess().target.llvm_target.contains("armv7em-none-eabi") {
+        if !codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NO_SPLIT_STACK) {
+            to_add.push(llvm::CreateAttrString(cx.llcx, "split-stack"));
+        }
+    }
+
     attributes::apply_to_llfn(llfn, Function, &to_add);
 }
 
diff --git a/compiler/rustc_codegen_ssa/src/codegen_attrs.rs b/compiler/rustc_codegen_ssa/src/codegen_attrs.rs
index 2e0840f2d1b..26524b08a81 100644
--- a/compiler/rustc_codegen_ssa/src/codegen_attrs.rs
+++ b/compiler/rustc_codegen_ssa/src/codegen_attrs.rs
@@ -102,6 +102,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: LocalDefId) -> CodegenFnAttrs {
 
         match name {
             sym::cold => codegen_fn_attrs.flags |= CodegenFnAttrFlags::COLD,
+            sym::no_split_stack => codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_SPLIT_STACK,
             sym::rustc_allocator => codegen_fn_attrs.flags |= CodegenFnAttrFlags::ALLOCATOR,
             sym::ffi_returns_twice => {
                 codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_RETURNS_TWICE
diff --git a/compiler/rustc_feature/src/builtin_attrs.rs b/compiler/rustc_feature/src/builtin_attrs.rs
index 214de3ca402..9c8e6c7deb6 100644
--- a/compiler/rustc_feature/src/builtin_attrs.rs
+++ b/compiler/rustc_feature/src/builtin_attrs.rs
@@ -383,6 +383,7 @@ pub struct BuiltinAttribute {
     // Code generation:
     ungated!(inline, Normal, template!(Word, List: "always|never"), FutureWarnFollowing, @only_local: true),
     ungated!(cold, Normal, template!(Word), WarnFollowing, @only_local: true),
+    ungated!(no_split_stack, Normal, template!(Word), WarnFollowing),
     ungated!(no_builtins, CrateLevel, template!(Word), WarnFollowing),
     ungated!(
         target_feature, Normal, template!(List: r#"enable = "name""#),
diff --git a/compiler/rustc_middle/src/middle/codegen_fn_attrs.rs b/compiler/rustc_middle/src/middle/codegen_fn_attrs.rs
index f758c1d5e6f..065c46d183f 100644
--- a/compiler/rustc_middle/src/middle/codegen_fn_attrs.rs
+++ b/compiler/rustc_middle/src/middle/codegen_fn_attrs.rs
@@ -102,6 +102,8 @@ pub struct CodegenFnAttrFlags: u32 {
         const ALLOCATOR_ZEROED          = 1 << 19;
         /// `#[no_builtins]`: indicates that disable implicit builtin knowledge of functions for the function.
         const NO_BUILTINS               = 1 << 20;
+        /// `#[no_split_stack]`: use contiguous stack instead of segmented stack.
+        const NO_SPLIT_STACK            = 1 << 21;
     }
 }
 
diff --git a/compiler/rustc_span/src/symbol.rs b/compiler/rustc_span/src/symbol.rs
index f287862cc23..fa34a3e44c5 100644
--- a/compiler/rustc_span/src/symbol.rs
+++ b/compiler/rustc_span/src/symbol.rs
@@ -1093,6 +1093,7 @@
         no_main,
         no_mangle,
         no_sanitize,
+        no_split_stack,
         no_stack_check,
         no_start,
         no_std,
-- 
2.39.3 (Apple Git-145)

