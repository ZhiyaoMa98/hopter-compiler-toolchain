diff --color -urN core_backup/src/panic/panic_info.rs core/src/panic/panic_info.rs
--- core_backup/src/panic/panic_info.rs	2024-09-12 14:56:01
+++ core/src/panic/panic_info.rs	2024-09-12 15:01:17
@@ -11,9 +11,7 @@
 #[lang = "panic_info"]
 #[stable(feature = "panic_hooks", since = "1.10.0")]
 #[derive(Debug)]
-pub struct PanicInfo<'a> {
-    message: fmt::Arguments<'a>,
-    location: &'a Location<'a>,
+pub struct PanicInfo {
     can_unwind: bool,
     force_no_backtrace: bool,
 }
@@ -25,19 +23,15 @@
 ///
 /// See [`PanicInfo::message`].
 #[stable(feature = "panic_info_message", since = "1.81.0")]
-pub struct PanicMessage<'a> {
-    message: fmt::Arguments<'a>,
-}
+pub struct PanicMessage;
 
-impl<'a> PanicInfo<'a> {
+impl PanicInfo {
     #[inline]
     pub(crate) fn new(
-        message: fmt::Arguments<'a>,
-        location: &'a Location<'a>,
         can_unwind: bool,
         force_no_backtrace: bool,
     ) -> Self {
-        PanicInfo { location, message, can_unwind, force_no_backtrace }
+        PanicInfo { can_unwind, force_no_backtrace }
     }
 
     /// The message that was given to the `panic!` macro.
@@ -58,9 +52,7 @@
     /// ```
     #[must_use]
     #[stable(feature = "panic_info_message", since = "1.81.0")]
-    pub fn message(&self) -> PanicMessage<'_> {
-        PanicMessage { message: self.message }
-    }
+    pub fn message(&self) -> PanicMessage { PanicMessage }
 
     /// Returns information about the location from which the panic originated,
     /// if available.
@@ -91,7 +83,7 @@
     pub fn location(&self) -> Option<&Location<'_>> {
         // NOTE: If this is changed to sometimes return None,
         // deal with that case in std::panicking::default_hook and core::panicking::panic_fmt.
-        Some(&self.location)
+        None
     }
 
     /// Returns the payload associated with the panic.
@@ -141,17 +133,15 @@
 }
 
 #[stable(feature = "panic_hook_display", since = "1.26.0")]
-impl Display for PanicInfo<'_> {
+impl Display for PanicInfo {
     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {
         formatter.write_str("panicked at ")?;
-        self.location.fmt(formatter)?;
         formatter.write_str(":\n")?;
-        formatter.write_fmt(self.message)?;
         Ok(())
     }
 }
 
-impl<'a> PanicMessage<'a> {
+impl PanicMessage {
     /// Get the formatted message, if it has no arguments to be formatted at runtime.
     ///
     /// This can be used to avoid allocations in some cases.
@@ -169,22 +159,18 @@
     #[must_use]
     #[inline]
     pub const fn as_str(&self) -> Option<&'static str> {
-        self.message.as_str()
+        None
     }
 }
 
 #[stable(feature = "panic_info_message", since = "1.81.0")]
-impl Display for PanicMessage<'_> {
+impl Display for PanicMessage {
     #[inline]
-    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {
-        formatter.write_fmt(self.message)
-    }
+    fn fmt(&self, _formatter: &mut fmt::Formatter<'_>) -> fmt::Result { Ok(())}
 }
 
 #[stable(feature = "panic_info_message", since = "1.81.0")]
-impl fmt::Debug for PanicMessage<'_> {
+impl fmt::Debug for PanicMessage {
     #[inline]
-    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {
-        formatter.write_fmt(self.message)
-    }
+    fn fmt(&self, _formatter: &mut fmt::Formatter<'_>) -> fmt::Result { Ok(()) }
 }
diff --color -urN core_backup/src/panic.rs core/src/panic.rs
--- core_backup/src/panic.rs	2024-09-12 14:56:01
+++ core/src/panic.rs	2024-09-12 15:08:23
@@ -40,7 +40,7 @@
     ($fmt:expr, $($arg:tt)+) => ({
         // Semicolon to prevent temporaries inside the formatting machinery from
         // being considered alive in the caller after the panic_fmt call.
-        $crate::panicking::panic_fmt($crate::const_format_args!($fmt, $($arg)+));
+        $crate::panicking::panic_fmt();
     }),
 }
 
@@ -61,7 +61,7 @@
     ($($t:tt)+) => ({
         // Semicolon to prevent temporaries inside the formatting machinery from
         // being considered alive in the caller after the panic_fmt call.
-        $crate::panicking::panic_fmt($crate::const_format_args!($($t)+));
+        $crate::panicking::panic_fmt();
     }),
 }
 
@@ -105,7 +105,7 @@
     ($($t:tt)+) => ({
         // Semicolon to prevent temporaries inside the formatting machinery from
         // being considered alive in the caller after the panic_fmt call.
-        $crate::panicking::panic_fmt($crate::const_format_args!($($t)+));
+        $crate::panicking::panic_fmt();
     }),
 }
 
diff --color -urN core_backup/src/panicking.rs core/src/panicking.rs
--- core_backup/src/panicking.rs	2024-09-12 14:56:01
+++ core/src/panicking.rs	2024-09-12 15:10:08
@@ -29,7 +29,7 @@
 )]
 
 use crate::fmt;
-use crate::panic::{Location, PanicInfo};
+use crate::panic::PanicInfo;
 
 #[cfg(feature = "panic_immediate_abort")]
 const _: () = assert!(cfg!(panic = "abort"), "panic_immediate_abort requires -C panic=abort");
@@ -45,13 +45,13 @@
 /// the actual formatting into this shared place.
 // If panic_immediate_abort, inline the abort call,
 // otherwise avoid inlining because of it is cold path.
-#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
+#[cfg_attr(not(feature = "panic_immediate_abort"), inline)]
 #[cfg_attr(feature = "panic_immediate_abort", inline)]
 #[track_caller]
 #[lang = "panic_fmt"] // needed for const-evaluated panics
 #[rustc_do_not_const_check] // hooked by const-eval
 #[rustc_const_unstable(feature = "panic_internals", issue = "none")]
-pub const fn panic_fmt(fmt: fmt::Arguments<'_>) -> ! {
+pub const fn panic_fmt() -> ! {
     if cfg!(feature = "panic_immediate_abort") {
         super::intrinsics::abort()
     }
@@ -60,12 +60,10 @@
     // that gets resolved to the `#[panic_handler]` function.
     extern "Rust" {
         #[lang = "panic_impl"]
-        fn panic_impl(pi: &PanicInfo<'_>) -> !;
+        fn panic_impl(pi: &PanicInfo) -> !;
     }
 
     let pi = PanicInfo::new(
-        fmt,
-        Location::caller(),
         /* can_unwind */ true,
         /* force_no_backtrace */ false,
     );
@@ -88,7 +86,7 @@
 pub const fn panic_nounwind_fmt(fmt: fmt::Arguments<'_>, force_no_backtrace: bool) -> ! {
     #[inline] // this should always be inlined into `panic_nounwind_fmt`
     #[track_caller]
-    fn runtime(fmt: fmt::Arguments<'_>, force_no_backtrace: bool) -> ! {
+    fn runtime(_: fmt::Arguments<'_>, force_no_backtrace: bool) -> ! {
         if cfg!(feature = "panic_immediate_abort") {
             super::intrinsics::abort()
         }
@@ -97,13 +95,11 @@
         // that gets resolved to the `#[panic_handler]` function.
         extern "Rust" {
             #[lang = "panic_impl"]
-            fn panic_impl(pi: &PanicInfo<'_>) -> !;
+            fn panic_impl(pi: &PanicInfo) -> !;
         }
 
         // PanicInfo with the `can_unwind` flag set to false forces an abort.
         let pi = PanicInfo::new(
-            fmt,
-            Location::caller(),
             /* can_unwind */ false,
             force_no_backtrace,
         );
@@ -114,9 +110,9 @@
 
     #[inline]
     #[track_caller]
-    const fn comptime(fmt: fmt::Arguments<'_>, _force_no_backtrace: bool) -> ! {
+    const fn comptime(_: fmt::Arguments<'_>, _force_no_backtrace: bool) -> ! {
         // We don't unwind anyway at compile-time so we can call the regular `panic_fmt`.
-        panic_fmt(fmt);
+        panic_fmt();
     }
 
     super::intrinsics::const_eval_select((fmt, force_no_backtrace), comptime, runtime);
@@ -128,12 +124,12 @@
 /// The underlying implementation of core's `panic!` macro when no formatting is used.
 // Never inline unless panic_immediate_abort to avoid code
 // bloat at the call sites as much as possible.
-#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
+#[cfg_attr(not(feature = "panic_immediate_abort"), inline)]
 #[cfg_attr(feature = "panic_immediate_abort", inline)]
 #[track_caller]
 #[rustc_const_unstable(feature = "panic_internals", issue = "none")]
 #[lang = "panic"] // used by lints and miri for panics
-pub const fn panic(expr: &'static str) -> ! {
+pub const fn panic(_: &'static str) -> ! {
     // Use Arguments::new_const instead of format_args!("{expr}") to potentially
     // reduce size overhead. The format_args! macro uses str's Display trait to
     // write expr, which calls Formatter::pad, which must accommodate string
@@ -145,7 +141,7 @@
     // payload without any allocation or copying. Shorter-lived strings would become invalid as
     // stack frames get popped during unwinding, and couldn't be directly referenced from the
     // payload.
-    panic_fmt(fmt::Arguments::new_const(&[expr]));
+    panic_fmt();
 }
 
 // We generate functions for usage by compiler-generated assertions.
@@ -178,7 +174,7 @@
                     // truncation and padding (even though none is used here). Using
                     // Arguments::new_const may allow the compiler to omit Formatter::pad from the
                     // output binary, saving up to a few kilobytes.
-                    panic_fmt(fmt::Arguments::new_const(&[$message]));
+                    panic_fmt();
                 }
             )+
         }
@@ -240,8 +236,8 @@
 #[inline]
 #[track_caller]
 #[rustc_diagnostic_item = "unreachable_display"] // needed for `non-fmt-panics` lint
-pub fn unreachable_display<T: fmt::Display>(x: &T) -> ! {
-    panic_fmt(format_args!("internal error: entered unreachable code: {}", *x));
+pub fn unreachable_display<T: fmt::Display>(_x: &T) -> ! {
+    panic_fmt();
 }
 
 /// This exists solely for the 2015 edition `panic!` macro to trigger
@@ -260,8 +256,8 @@
 // enforce a &&str argument in const-check and hook this by const-eval
 #[rustc_const_panic_str]
 #[rustc_const_unstable(feature = "panic_internals", issue = "none")]
-pub const fn panic_display<T: fmt::Display>(x: &T) -> ! {
-    panic_fmt(format_args!("{}", *x));
+pub const fn panic_display<T: fmt::Display>(_x: &T) -> ! {
+    panic_fmt();
 }
 
 #[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
