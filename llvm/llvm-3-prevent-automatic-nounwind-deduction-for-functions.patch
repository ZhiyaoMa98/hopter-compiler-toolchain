From 98ff917f5aa977d9766315e05cd1e5002ea7f163 Mon Sep 17 00:00:00 2001
From: Zhiyao Ma <zhiyao.ma.98@gmail.com>
Date: Wed, 11 Sep 2024 20:57:04 -0400
Subject: [PATCH] Prevent automatic `nounwind` deduction for functions.

---
 llvm/include/llvm/Transforms/IPO/Attributor.h |  46 +++----
 llvm/lib/Transforms/IPO/Attributor.cpp        |   4 +-
 .../Transforms/IPO/AttributorAttributes.cpp   | 128 +++++++++---------
 llvm/lib/Transforms/IPO/FunctionAttrs.cpp     |  42 +++---
 4 files changed, 110 insertions(+), 110 deletions(-)

diff --git a/llvm/include/llvm/Transforms/IPO/Attributor.h b/llvm/include/llvm/Transforms/IPO/Attributor.h
index 30c51250af61..29b312163c27 100644
--- a/llvm/include/llvm/Transforms/IPO/Attributor.h
+++ b/llvm/include/llvm/Transforms/IPO/Attributor.h
@@ -3470,35 +3470,35 @@ ChangeStatus clampStateAndIndicateChange(StateType &S, const StateType &R) {
 ///                       Abstract Attribute Classes
 /// ----------------------------------------------------------------------------
 
-struct AANoUnwind
-    : public IRAttribute<Attribute::NoUnwind,
-                         StateWrapper<BooleanState, AbstractAttribute>,
-                         AANoUnwind> {
-  AANoUnwind(const IRPosition &IRP, Attributor &A) : IRAttribute(IRP) {}
+// struct AANoUnwind
+//     : public IRAttribute<Attribute::NoUnwind,
+//                          StateWrapper<BooleanState, AbstractAttribute>,
+//                          AANoUnwind> {
+//   AANoUnwind(const IRPosition &IRP, Attributor &A) : IRAttribute(IRP) {}
 
-  /// Returns true if nounwind is assumed.
-  bool isAssumedNoUnwind() const { return getAssumed(); }
+//   /// Returns true if nounwind is assumed.
+//   bool isAssumedNoUnwind() const { return getAssumed(); }
 
-  /// Returns true if nounwind is known.
-  bool isKnownNoUnwind() const { return getKnown(); }
+//   /// Returns true if nounwind is known.
+//   bool isKnownNoUnwind() const { return getKnown(); }
 
-  /// Create an abstract attribute view for the position \p IRP.
-  static AANoUnwind &createForPosition(const IRPosition &IRP, Attributor &A);
+//   /// Create an abstract attribute view for the position \p IRP.
+//   static AANoUnwind &createForPosition(const IRPosition &IRP, Attributor &A);
 
-  /// See AbstractAttribute::getName()
-  const std::string getName() const override { return "AANoUnwind"; }
+//   /// See AbstractAttribute::getName()
+//   const std::string getName() const override { return "AANoUnwind"; }
 
-  /// See AbstractAttribute::getIdAddr()
-  const char *getIdAddr() const override { return &ID; }
+//   /// See AbstractAttribute::getIdAddr()
+//   const char *getIdAddr() const override { return &ID; }
 
-  /// This function should return true if the type of the \p AA is AANoUnwind
-  static bool classof(const AbstractAttribute *AA) {
-    return (AA->getIdAddr() == &ID);
-  }
+//   /// This function should return true if the type of the \p AA is AANoUnwind
+//   static bool classof(const AbstractAttribute *AA) {
+//     return (AA->getIdAddr() == &ID);
+//   }
 
-  /// Unique ID (due to the unique address)
-  static const char ID;
-};
+//   /// Unique ID (due to the unique address)
+//   static const char ID;
+// };
 
 struct AANoSync
     : public IRAttribute<Attribute::NoSync,
@@ -6452,7 +6452,7 @@ bool hasAssumedIRAttr(Attributor &A, const AbstractAttribute *QueryingAA,
     IsKnown = AA->isKnown(__VA_ARGS__);                                        \
     return true;                                                               \
   }
-    CASE(NoUnwind, AANoUnwind, );
+    // CASE(NoUnwind, AANoUnwind, );
     CASE(WillReturn, AAWillReturn, );
     CASE(NoFree, AANoFree, );
     CASE(NoCapture, AANoCapture, );
diff --git a/llvm/lib/Transforms/IPO/Attributor.cpp b/llvm/lib/Transforms/IPO/Attributor.cpp
index d8e290cbc8a4..c14515f24999 100644
--- a/llvm/lib/Transforms/IPO/Attributor.cpp
+++ b/llvm/lib/Transforms/IPO/Attributor.cpp
@@ -3397,7 +3397,7 @@ void Attributor::identifyDefaultAbstractAttributes(Function &F) {
   if (IsIPOAmendable) {
 
     // Every function can be nounwind.
-    checkAndQueryIRAttr<Attribute::NoUnwind, AANoUnwind>(FPos, FnAttrs);
+    // checkAndQueryIRAttr<Attribute::NoUnwind, AANoUnwind>(FPos, FnAttrs);
 
     // Every function might be "no-return".
     checkAndQueryIRAttr<Attribute::NoReturn, AANoReturn>(FPos, FnAttrs);
@@ -3929,7 +3929,7 @@ static bool runAttributorLightOnFunctions(InformationCache &InfoCache,
   AC.IsModulePass = IsModulePass;
   AC.DeleteFns = false;
   DenseSet<const char *> Allowed(
-      {&AAWillReturn::ID, &AANoUnwind::ID, &AANoRecurse::ID, &AANoSync::ID,
+      {&AAWillReturn::ID, /*&AANoUnwind::ID,*/ &AANoRecurse::ID, &AANoSync::ID,
        &AANoFree::ID, &AANoReturn::ID, &AAMemoryLocation::ID,
        &AAMemoryBehavior::ID, &AAUnderlyingObjects::ID, &AANoCapture::ID,
        &AAInterFnReachability::ID, &AAIntraFnReachability::ID, &AACallEdges::ID,
diff --git a/llvm/lib/Transforms/IPO/AttributorAttributes.cpp b/llvm/lib/Transforms/IPO/AttributorAttributes.cpp
index 585364dd7aa2..4b4b18287a24 100644
--- a/llvm/lib/Transforms/IPO/AttributorAttributes.cpp
+++ b/llvm/lib/Transforms/IPO/AttributorAttributes.cpp
@@ -161,7 +161,7 @@ namespace llvm {
   }
 
 PIPE_OPERATOR(AAIsDead)
-PIPE_OPERATOR(AANoUnwind)
+// PIPE_OPERATOR(AANoUnwind)
 PIPE_OPERATOR(AANoSync)
 PIPE_OPERATOR(AANoRecurse)
 PIPE_OPERATOR(AANonConvergent)
@@ -2043,67 +2043,67 @@ struct AAPointerInfoCallSiteReturned final : AAPointerInfoFloating {
 /// -----------------------NoUnwind Function Attribute--------------------------
 
 namespace {
-struct AANoUnwindImpl : AANoUnwind {
-  AANoUnwindImpl(const IRPosition &IRP, Attributor &A) : AANoUnwind(IRP, A) {}
-
-  /// See AbstractAttribute::initialize(...).
-  void initialize(Attributor &A) override {
-    bool IsKnown;
-    assert(!AA::hasAssumedIRAttr<Attribute::NoUnwind>(
-        A, nullptr, getIRPosition(), DepClassTy::NONE, IsKnown));
-    (void)IsKnown;
-  }
-
-  const std::string getAsStr(Attributor *A) const override {
-    return getAssumed() ? "nounwind" : "may-unwind";
-  }
-
-  /// See AbstractAttribute::updateImpl(...).
-  ChangeStatus updateImpl(Attributor &A) override {
-    auto Opcodes = {
-        (unsigned)Instruction::Invoke,      (unsigned)Instruction::CallBr,
-        (unsigned)Instruction::Call,        (unsigned)Instruction::CleanupRet,
-        (unsigned)Instruction::CatchSwitch, (unsigned)Instruction::Resume};
-
-    auto CheckForNoUnwind = [&](Instruction &I) {
-      if (!I.mayThrow(/* IncludePhaseOneUnwind */ true))
-        return true;
-
-      if (const auto *CB = dyn_cast<CallBase>(&I)) {
-        bool IsKnownNoUnwind;
-        return AA::hasAssumedIRAttr<Attribute::NoUnwind>(
-            A, this, IRPosition::callsite_function(*CB), DepClassTy::REQUIRED,
-            IsKnownNoUnwind);
-      }
-      return false;
-    };
-
-    bool UsedAssumedInformation = false;
-    if (!A.checkForAllInstructions(CheckForNoUnwind, *this, Opcodes,
-                                   UsedAssumedInformation))
-      return indicatePessimisticFixpoint();
-
-    return ChangeStatus::UNCHANGED;
-  }
-};
-
-struct AANoUnwindFunction final : public AANoUnwindImpl {
-  AANoUnwindFunction(const IRPosition &IRP, Attributor &A)
-      : AANoUnwindImpl(IRP, A) {}
-
-  /// See AbstractAttribute::trackStatistics()
-  void trackStatistics() const override { STATS_DECLTRACK_FN_ATTR(nounwind) }
-};
-
-/// NoUnwind attribute deduction for a call sites.
-struct AANoUnwindCallSite final
-    : AACalleeToCallSite<AANoUnwind, AANoUnwindImpl> {
-  AANoUnwindCallSite(const IRPosition &IRP, Attributor &A)
-      : AACalleeToCallSite<AANoUnwind, AANoUnwindImpl>(IRP, A) {}
-
-  /// See AbstractAttribute::trackStatistics()
-  void trackStatistics() const override { STATS_DECLTRACK_CS_ATTR(nounwind); }
-};
+// struct AANoUnwindImpl : AANoUnwind {
+//   AANoUnwindImpl(const IRPosition &IRP, Attributor &A) : AANoUnwind(IRP, A) {}
+
+//   /// See AbstractAttribute::initialize(...).
+//   void initialize(Attributor &A) override {
+//     bool IsKnown;
+//     assert(!AA::hasAssumedIRAttr<Attribute::NoUnwind>(
+//         A, nullptr, getIRPosition(), DepClassTy::NONE, IsKnown));
+//     (void)IsKnown;
+//   }
+
+//   const std::string getAsStr(Attributor *A) const override {
+//     return getAssumed() ? "nounwind" : "may-unwind";
+//   }
+
+//   /// See AbstractAttribute::updateImpl(...).
+//   ChangeStatus updateImpl(Attributor &A) override {
+//     auto Opcodes = {
+//         (unsigned)Instruction::Invoke,      (unsigned)Instruction::CallBr,
+//         (unsigned)Instruction::Call,        (unsigned)Instruction::CleanupRet,
+//         (unsigned)Instruction::CatchSwitch, (unsigned)Instruction::Resume};
+
+//     auto CheckForNoUnwind = [&](Instruction &I) {
+//       if (!I.mayThrow(/* IncludePhaseOneUnwind */ true))
+//         return true;
+
+//       if (const auto *CB = dyn_cast<CallBase>(&I)) {
+//         bool IsKnownNoUnwind;
+//         return AA::hasAssumedIRAttr<Attribute::NoUnwind>(
+//             A, this, IRPosition::callsite_function(*CB), DepClassTy::REQUIRED,
+//             IsKnownNoUnwind);
+//       }
+//       return false;
+//     };
+
+//     bool UsedAssumedInformation = false;
+//     if (!A.checkForAllInstructions(CheckForNoUnwind, *this, Opcodes,
+//                                    UsedAssumedInformation))
+//       return indicatePessimisticFixpoint();
+
+//     return ChangeStatus::UNCHANGED;
+//   }
+// };
+
+// struct AANoUnwindFunction final : public AANoUnwindImpl {
+//   AANoUnwindFunction(const IRPosition &IRP, Attributor &A)
+//       : AANoUnwindImpl(IRP, A) {}
+
+//   /// See AbstractAttribute::trackStatistics()
+//   void trackStatistics() const override { STATS_DECLTRACK_FN_ATTR(nounwind) }
+// };
+
+// /// NoUnwind attribute deduction for a call sites.
+// struct AANoUnwindCallSite final
+//     : AACalleeToCallSite<AANoUnwind, AANoUnwindImpl> {
+//   AANoUnwindCallSite(const IRPosition &IRP, Attributor &A)
+//       : AACalleeToCallSite<AANoUnwind, AANoUnwindImpl>(IRP, A) {}
+
+//   /// See AbstractAttribute::trackStatistics()
+//   void trackStatistics() const override { STATS_DECLTRACK_CS_ATTR(nounwind); }
+// };
 } // namespace
 
 /// ------------------------ NoSync Function Attribute -------------------------
@@ -12884,7 +12884,7 @@ struct AAAllocationInfoCallSiteArgument : AAAllocationInfoImpl {
 };
 } // namespace
 
-const char AANoUnwind::ID = 0;
+// const char AANoUnwind::ID = 0;
 const char AANoSync::ID = 0;
 const char AANoFree::ID = 0;
 const char AANonNull::ID = 0;
@@ -13027,7 +13027,7 @@ const char AADenormalFPMath::ID = 0;
     return *AA;                                                                \
   }
 
-CREATE_FUNCTION_ABSTRACT_ATTRIBUTE_FOR_POSITION(AANoUnwind)
+// CREATE_FUNCTION_ABSTRACT_ATTRIBUTE_FOR_POSITION(AANoUnwind)
 CREATE_FUNCTION_ABSTRACT_ATTRIBUTE_FOR_POSITION(AANoSync)
 CREATE_FUNCTION_ABSTRACT_ATTRIBUTE_FOR_POSITION(AANoRecurse)
 CREATE_FUNCTION_ABSTRACT_ATTRIBUTE_FOR_POSITION(AAWillReturn)
diff --git a/llvm/lib/Transforms/IPO/FunctionAttrs.cpp b/llvm/lib/Transforms/IPO/FunctionAttrs.cpp
index 27c411250d53..4f634f2f3164 100644
--- a/llvm/lib/Transforms/IPO/FunctionAttrs.cpp
+++ b/llvm/lib/Transforms/IPO/FunctionAttrs.cpp
@@ -1590,27 +1590,27 @@ static void inferAttrsFromFunctionBodies(const SCCNodeSet &SCCNodes,
                                          SmallSet<Function *, 8> &Changed) {
   AttributeInferer AI;
 
-  if (!DisableNoUnwindInference)
-    // Request to infer nounwind attribute for all the functions in the SCC if
-    // every callsite within the SCC is not throwing (except for calls to
-    // functions within the SCC). Note that nounwind attribute suffers from
-    // derefinement - results may change depending on how functions are
-    // optimized. Thus it can be inferred only from exact definitions.
-    AI.registerAttrInference(AttributeInferer::InferenceDescriptor{
-        Attribute::NoUnwind,
-        // Skip non-throwing functions.
-        [](const Function &F) { return F.doesNotThrow(); },
-        // Instructions that break non-throwing assumption.
-        [&SCCNodes](Instruction &I) {
-          return InstrBreaksNonThrowing(I, SCCNodes);
-        },
-        [](Function &F) {
-          LLVM_DEBUG(dbgs()
-                     << "Adding nounwind attr to fn " << F.getName() << "\n");
-          F.setDoesNotThrow();
-          ++NumNoUnwind;
-        },
-        /* RequiresExactDefinition= */ true});
+  // if (!DisableNoUnwindInference)
+  //   // Request to infer nounwind attribute for all the functions in the SCC if
+  //   // every callsite within the SCC is not throwing (except for calls to
+  //   // functions within the SCC). Note that nounwind attribute suffers from
+  //   // derefinement - results may change depending on how functions are
+  //   // optimized. Thus it can be inferred only from exact definitions.
+  //   AI.registerAttrInference(AttributeInferer::InferenceDescriptor{
+  //       Attribute::NoUnwind,
+  //       // Skip non-throwing functions.
+  //       [](const Function &F) { return F.doesNotThrow(); },
+  //       // Instructions that break non-throwing assumption.
+  //       [&SCCNodes](Instruction &I) {
+  //         return InstrBreaksNonThrowing(I, SCCNodes);
+  //       },
+  //       [](Function &F) {
+  //         LLVM_DEBUG(dbgs()
+  //                    << "Adding nounwind attr to fn " << F.getName() << "\n");
+  //         F.setDoesNotThrow();
+  //         ++NumNoUnwind;
+  //       },
+  //       /* RequiresExactDefinition= */ true});
 
   if (!DisableNoFreeInference)
     // Request to infer nofree attribute for all the functions in the SCC if
-- 
2.39.3 (Apple Git-146)

